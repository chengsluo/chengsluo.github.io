<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spark操作笔记</title>
      <link href="/2018/01/10/Spark%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/01/10/Spark%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Spark简介"><a href="#Spark简介" class="headerlink" title="Spark简介"></a>Spark简介</h2><h3 id="什么是Spark？"><a href="#什么是Spark？" class="headerlink" title="什么是Spark？"></a>什么是Spark？</h3><p>Apache Spark是用于大规模数据处理的快速(fast)和通用(general)引擎，由加州伯克利分校AMP(Algorithms、Machines and People Lab，在算法、机器和人之间通过大规模集成来展现大数据的应用平台)实验室开发的大数据处理框架。<br>Spark提供了大数据处理的一站式解决方案，以Spark Core为基础推出了Spark SQL、Spark Streaming、MLlib、GraphX、SparkR等组件。整个Spark生态体系称为BDAS，即：伯克利数据分析栈。</p><span id="more"></span><h3 id="Spark特点"><a href="#Spark特点" class="headerlink" title="Spark特点"></a>Spark特点</h3><p>Spark具有运行速度快、易用性好、通用型强和随处运行的特点。</p><h4 id="运行速度快-Speed"><a href="#运行速度快-Speed" class="headerlink" title="运行速度快(Speed)"></a>运行速度快(Speed)</h4><p>如果Spark基于内存读取，速度是Hadoop的100倍；使用磁盘读取，也是Hadoop的十倍。spark之所以能够比Hadoop快，有两点主要原因：内存计算和引入DAG执行引擎。</p><h4 id="易用性好-Ease-of-Use"><a href="#易用性好-Ease-of-Use" class="headerlink" title="易用性好(Ease of Use)"></a>易用性好(Ease of Use)</h4><p>Spark支持Scala、Java、Python、R语言编写应用程序，并且提供了Scala、Python、R的交互式操作shell。</p><h4 id="通用型强-generality"><a href="#通用型强-generality" class="headerlink" title="通用型强(generality)"></a>通用型强(generality)</h4><p>Spark提供了一站式的大数据解决方案，生态圈BADS包含了：提供内存计算框架的Spark Core、用于结构化查询的Spark SQL、用于实时计算的Spark Streaming、用于机器学习的MLlib和用于图计算的GraphX。</p><h4 id="随处运行-Runs-Everywhere"><a href="#随处运行-Runs-Everywhere" class="headerlink" title="随处运行(Runs Everywhere)"></a>随处运行(Runs Everywhere)</h4><p>Spark提供了本地Local运行模式，用来学习和测试(当然还有许多用途，比如我们正在做的一个项目就是基于Local模式的)。对于集群部署模式，Spark能够以YARN、Mesos和自身提供的Standalone作为资源管理调度框架来执行作业。对于数据源，Spark能够读取HDFS、Cassandra、HBase、S3、Alluxio等数据源数据。</p><h2 id="资源调度器YARN"><a href="#资源调度器YARN" class="headerlink" title="资源调度器YARN"></a>资源调度器YARN</h2><h3 id="YARN简介"><a href="#YARN简介" class="headerlink" title="YARN简介"></a>YARN简介</h3><p>YARＮ是Spark的3种调度器之一,主要是用来管理和分配集群资源<br>需要根据情况修改YARN默认参数配置(修改yarn-site.xml或者CDH设置):</p><h3 id="提交任务到集群-根据计算类型分配各自参数"><a href="#提交任务到集群-根据计算类型分配各自参数" class="headerlink" title="提交任务到集群,根据计算类型分配各自参数:"></a>提交任务到集群,根据计算类型分配各自参数:</h3><ul><li>IO密集型:每个exector的cores为１就好;</li><li>driver-memory:主要取决于最后聚合输出(如collect操作)的结果大小;</li><li>num-executors:最好与代码里面的partition或coalesce操作的分区数量相匹配;</li><li>executor-memory:取决于每个stage需要的内存大小;</li><li>为了使代码更加清晰可读，shell代码可以使用\来分行<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env sh</span><br><span class="line">sbt package &amp;&amp;\</span><br><span class="line">scp target/scala-2.11/metro-data_2.11-1.0.jar \</span><br><span class="line">root@c1:~/chengsluo/ &amp;&amp;\</span><br><span class="line">ssh root@c1 -o StrictHostKeyChecking=no &quot;</span><br><span class="line">cd chengsluo &amp;&amp; \</span><br><span class="line">spark2-submit \</span><br><span class="line">--master yarn \</span><br><span class="line">--deploy-mode cluster \</span><br><span class="line">--executor-memory 1g \</span><br><span class="line">--executor-cores 2 \</span><br><span class="line">metro-data_2.11-1.0.jar </span><br><span class="line">&quot;</span><br></pre></td></tr></table></figure></li></ul><h3 id="提前中断任务"><a href="#提前中断任务" class="headerlink" title="提前中断任务"></a>提前中断任务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn application -kill application_1516444072266_0002</span><br></pre></td></tr></table></figure><h2 id="HIVE和Spark-SQL性能对比"><a href="#HIVE和Spark-SQL性能对比" class="headerlink" title="HIVE和Spark-SQL性能对比"></a>HIVE和Spark-SQL性能对比</h2><h3 id="逻辑介绍"><a href="#逻辑介绍" class="headerlink" title="逻辑介绍"></a>逻辑介绍</h3><ul><li>生成OD断面中间表,通过历史运行数据来得到运行线路；</li><li>由一个历史OD比例表与一个子查询链接,共生成130441786条数据。</li></ul><h3 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h3><table><thead><tr><th>—</th><th>Spark with Python</th><th>Spark with Scala</th><th>HIVE On MapReduce</th></tr></thead><tbody><tr><td>耗时</td><td>4.7min</td><td>4.4min</td><td>20min</td></tr><tr><td>其中HIVE on MapReduce可能受大屏项目的其他查询影响，导致速度很可能比正常要慢一些。</td><td></td><td></td><td></td></tr></tbody></table><h3 id="三种实现"><a href="#三种实现" class="headerlink" title="三种实现"></a>三种实现</h3><p>HIVE-SQL语句:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">insert overwrite table sparktest.tbl_dm_od_cust_mid1 select </span><br><span class="line">    dm_id     </span><br><span class="line"> ,a.od_begin_cd</span><br><span class="line">    ,a.od_end_cd</span><br><span class="line">    ,a.time_id</span><br><span class="line">    ,line_id</span><br><span class="line">    ,GD_begin_cd</span><br><span class="line">    ,gd_end_cd</span><br><span class="line">    ,lead(gd_end_cd,1,&#x27;0000&#x27;) over(partition by substr(cast(dm_id as string),1,9) order by run_time) as gd_end_cd_nxt</span><br><span class="line">    ,gd_begin_nm</span><br><span class="line">    ,gd_end_nm</span><br><span class="line">    ,a.time_id+run_time/3 as sta_time_id</span><br><span class="line">    ,a.time_id+max_time/3 end_time_id</span><br><span class="line">    ,cast(b.percent*a.cust_rate as float) precent</span><br><span class="line">from</span><br><span class="line">    sptcc_dm.tbl_dm_od_rate a,</span><br><span class="line">    (select</span><br><span class="line">         dm_id</span><br><span class="line">   ,line_id</span><br><span class="line">         ,od_begin_cd</span><br><span class="line">         ,od_end_cd</span><br><span class="line">         ,gd_begin_cd</span><br><span class="line">         ,gd_end_cd</span><br><span class="line">    ,lead(gd_end_cd,1,&#x27;0000&#x27;) over(partition by substr(cast(dm_id as string),1,9) order by run_time) as gd_end_cd_nxt</span><br><span class="line">         ,gd_begin_nm</span><br><span class="line">         ,gd_end_nm</span><br><span class="line">         ,run_time</span><br><span class="line">         ,percent</span><br><span class="line">         ,max(run_time) over(partition by substr(cast(dm_id as string),1,9)) as max_time</span><br><span class="line">    from sptcc_dpa.tbl_dim_od_dm</span><br><span class="line">    ) b</span><br><span class="line">where</span><br><span class="line">    a.od_begin_cd=b.od_begin_cd</span><br><span class="line">    and a.od_end_cd=b.od_end_cd</span><br></pre></td></tr></table></figure><p>Spark实现代码:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.spark.examples.sql.hive</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkHiveExample</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span></span><br><span class="line">      .builder()</span><br><span class="line">      .appName(<span class="string">&quot;Spark Speed Test&quot;</span>)</span><br><span class="line">      .enableHiveSupport()</span><br><span class="line">      .getOrCreate()</span><br><span class="line">    <span class="keyword">import</span> spark.sql</span><br><span class="line">    sql(<span class="string">&quot;insert overwrite table sparktest.tbl_dm_od_cust_mid1 &quot;</span> +</span><br><span class="line">      <span class="string">&quot;select &quot;</span> +</span><br><span class="line">      <span class="string">&quot;dm_id,&quot;</span> +</span><br><span class="line">      <span class="string">&quot;a.od_begin_cd,&quot;</span> +</span><br><span class="line">      <span class="string">&quot;a.od_end_cd,&quot;</span> +</span><br><span class="line">      <span class="string">&quot;a.time_id,&quot;</span> +</span><br><span class="line">      <span class="string">&quot;line_id,&quot;</span> +</span><br><span class="line">      <span class="string">&quot;GD_begin_cd,&quot;</span> +</span><br><span class="line">      <span class="string">&quot;gd_end_cd,&quot;</span> +</span><br><span class="line">      <span class="string">&quot;lead(gd_end_cd,1,&#x27;0000&#x27;) over(partition by substr(cast(dm_id as string),1,9) order by run_time) as gd_end_cd_nxt,&quot;</span> +</span><br><span class="line">      <span class="string">&quot;gd_begin_nm,&quot;</span> +</span><br><span class="line">      <span class="string">&quot;gd_end_nm,&quot;</span> +</span><br><span class="line">      <span class="string">&quot;a.time_id+run_time/3 as sta_time_id ,&quot;</span> +</span><br><span class="line">      <span class="string">&quot;a.time_id+max_time/3 end_time_id,&quot;</span> +</span><br><span class="line">      <span class="string">&quot;cast(b.percent*a.cust_rate as float) precent &quot;</span> +</span><br><span class="line">      <span class="string">&quot;from &quot;</span> +</span><br><span class="line">      <span class="string">&quot;sptcc_dm.tbl_dm_od_rate a, &quot;</span> +</span><br><span class="line">      <span class="string">&quot;(select dm_id ,line_id,od_begin_cd,od_end_cd,gd_begin_cd,gd_end_cd ,lead(gd_end_cd,1,&#x27;0000&#x27;) over(partition by substr(cast(dm_id as string),1,9) order by run_time) as gd_end_cd_nxt,gd_begin_nm,gd_end_nm,run_time,percent,max(run_time) over(partition by substr(cast(dm_id as string),1,9)) as max_time &quot;</span> +</span><br><span class="line">            <span class="string">&quot; from sptcc_dpa.tbl_dim_od_dm) b &quot;</span> +</span><br><span class="line">      <span class="string">&quot;where &quot;</span> +</span><br><span class="line">      <span class="string">&quot;a.od_begin_cd=b.od_begin_cd &quot;</span> +</span><br><span class="line">      <span class="string">&quot;and &quot;</span> +</span><br><span class="line">      <span class="string">&quot;a.od_end_cd=b.od_end_cd&quot;</span></span><br><span class="line">    )</span><br><span class="line">    spark.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pyspark实现代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> HiveContext</span><br><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> SparkSession</span><br><span class="line"><span class="keyword">from</span> pyspark.context <span class="keyword">import</span> SparkContext</span><br><span class="line">spark=SparkSession.builder.master(<span class="string">&#x27;yarn&#x27;</span>).appName(<span class="string">&#x27;test&#x27;</span>).config(<span class="string">&quot;spark.hadoop.validateOutputSpecs&quot;</span>, <span class="string">&quot;false&quot;</span>)\</span><br><span class="line">    .config(<span class="string">&quot;spark.sql.parquet.compression.codec&quot;</span>,<span class="string">&quot;gzip&quot;</span>).getOrCreate()</span><br><span class="line">sc = spark.sparkContext</span><br><span class="line">sqlContext = HiveContext(sc)</span><br><span class="line">sqlContext.sql(<span class="string">&quot;&quot;&quot;insert overwrite table sparktest.tbl_dm_od_cust_mid1 select </span></span><br><span class="line"><span class="string">    dm_id     </span></span><br><span class="line"><span class="string"> ,a.od_begin_cd</span></span><br><span class="line"><span class="string">    ,a.od_end_cd</span></span><br><span class="line"><span class="string">    ,a.time_id</span></span><br><span class="line"><span class="string">    ,line_id</span></span><br><span class="line"><span class="string">    ,GD_begin_cd</span></span><br><span class="line"><span class="string">    ,gd_end_cd</span></span><br><span class="line"><span class="string">    ,lead(gd_end_cd,1,&#x27;0000&#x27;) over(partition by substr(cast(dm_id as string),1,9) order by run_time) as gd_end_cd_nxt</span></span><br><span class="line"><span class="string">    ,gd_begin_nm</span></span><br><span class="line"><span class="string">    ,gd_end_nm</span></span><br><span class="line"><span class="string">    ,a.time_id+run_time/3 as sta_time_id</span></span><br><span class="line"><span class="string">    ,a.time_id+max_time/3 end_time_id</span></span><br><span class="line"><span class="string">    ,cast(b.percent*a.cust_rate as float) precent</span></span><br><span class="line"><span class="string">from</span></span><br><span class="line"><span class="string">    sptcc_dm.tbl_dm_od_rate a,</span></span><br><span class="line"><span class="string">    (select</span></span><br><span class="line"><span class="string">         dm_id</span></span><br><span class="line"><span class="string">   ,line_id</span></span><br><span class="line"><span class="string">         ,od_begin_cd</span></span><br><span class="line"><span class="string">         ,od_end_cd</span></span><br><span class="line"><span class="string">         ,gd_begin_cd</span></span><br><span class="line"><span class="string">         ,gd_end_cd</span></span><br><span class="line"><span class="string">    ,lead(gd_end_cd,1,&#x27;0000&#x27;) over(partition by substr(cast(dm_id as string),1,9) order by run_time) as gd_end_cd_nxt</span></span><br><span class="line"><span class="string">         ,gd_begin_nm</span></span><br><span class="line"><span class="string">         ,gd_end_nm</span></span><br><span class="line"><span class="string">         ,run_time</span></span><br><span class="line"><span class="string">         ,percent</span></span><br><span class="line"><span class="string">         ,max(run_time) over(partition by substr(cast(dm_id as string),1,9)) as max_time</span></span><br><span class="line"><span class="string">    from sptcc_dpa.tbl_dim_od_dm</span></span><br><span class="line"><span class="string">    ) b</span></span><br><span class="line"><span class="string">where</span></span><br><span class="line"><span class="string">    a.od_begin_cd=b.od_begin_cd</span></span><br><span class="line"><span class="string">    and a.od_end_cd=b.od_end_cd&quot;&quot;&quot;</span>).show()</span><br></pre></td></tr></table></figure><h3 id="评价"><a href="#评价" class="headerlink" title="评价"></a>评价</h3><p>在本次测试中，只是简单的使用了一下Spark中SQL查询API的使用。实际上并没有体现出Spark的优势。个人觉得Spark的优势在于在一系列的业务处理和查询过程中，可以很方便的把子查询的中间结果大批量的缓存在内存中，这样就给传统的SQL查询带来了很多优化的空间。另外，Spark也可以快速的对处理结果进行RDD编程和流式处理，这样Spark平台就可以支撑起绝大多数业务类型了。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="测试组件版本"><a href="#测试组件版本" class="headerlink" title="测试组件版本"></a>测试组件版本</h3><ul><li>hadoop:2.6.0</li><li>spark:2.1.0</li><li>hive:1.1.0</li><li>java:1.8</li></ul><h3 id="网页资料"><a href="#网页资料" class="headerlink" title="网页资料"></a>网页资料</h3><ol><li><a href="https://spark.apache.org/docs/2.1.0/sql-programming-guide.html">Spark-SQL,DataFrames and Datasets 官方文档</a></li><li><a href="https://segmentfault.com/a/1190000002672666">hadoop HDFS常用文件操作命令</a></li><li><a href="http://blog.javachen.com/2015/06/05/yarn-memory-and-cpu-configuration.html">YARN的内存和CPU配置</a></li><li><a href="http://blog.javachen.com/categories.html#spark">JavaChen的博客里面的示例很好</a></li><li><a href="http://blog.csdn.net/sinat_29581293/article/details/62045523">Spark的一些调优经验</a></li></ol><h3 id="学习中的一些坑"><a href="#学习中的一些坑" class="headerlink" title="学习中的一些坑"></a>学习中的一些坑</h3><ol><li>对于有结果的任务，下一次重新运行时要记得清空结果</li><li>对于输入输出路径最好参数化，本地测试和集群运行使用不同的参数即可</li><li>对于yarn的参数最好不要写死在代码里面，而是在运行的脚本里面附件参数，这样调试更灵活</li><li>编译时要注意各种组件的版本号,本地测试时要配置与集群一致的版本号.</li><li>像我这样对API不熟悉的初学者，测试时应该尽量用spark-shell调试代码原型，在本地编辑器中调试不是很方便。</li><li>要分清Spark中的RDD&#x2F;DF和DS区别和相互转化。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Docker构建集群并运行WordCount</title>
      <link href="/2017/11/15/%E5%88%A9%E7%94%A8Docker%E6%9E%84%E5%BB%BA%E9%9B%86%E7%BE%A4%E5%B9%B6%E8%BF%90%E8%A1%8CWordCount/"/>
      <url>/2017/11/15/%E5%88%A9%E7%94%A8Docker%E6%9E%84%E5%BB%BA%E9%9B%86%E7%BE%A4%E5%B9%B6%E8%BF%90%E8%A1%8CWordCount/</url>
      
        <content type="html"><![CDATA[<h3 id="Basic-Cluster"><a href="#Basic-Cluster" class="headerlink" title="Basic Cluster"></a>Basic Cluster</h3><p>This repository provides docker configurations for quick Hadoop cluster setup.<br>Provides a 1 <code>Namenode</code> and 2 <code>Datanode</code> setup.<br>How to use:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/chengsluo/hadoop-expt.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> hadoop-expt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker-compose -f hadoop-basic.yml up</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>Refer this blog post for more details: <a href="http://codito.in/hadoop-cluster-in-docker">http://codito.in/hadoop-cluster-in-docker</a>.</p><h3 id="Credits"><a href="#Credits" class="headerlink" title="Credits"></a>Credits</h3><p>Many thanks to <a href="https://bitbucket.org/uhopper/hadoop-docker">uhopper</a> for<br>providing excellent base hadoop images.</p><h3 id="Word-Count-Test"><a href="#Word-Count-Test" class="headerlink" title="Word Count Test"></a>Word Count Test</h3><p>Enter the running namenode container</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">exec</span> -it namenode bash</span></span><br></pre></td></tr></table></figure><p>Switch to the mount volume directory</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /hadoop-data</span></span><br></pre></td></tr></table></figure><p>Create the a project directory in hadoop file system</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hadoop fs -<span class="built_in">mkdir</span> -p hdfs://namenode:8020/project/wordcount</span></span><br></pre></td></tr></table></figure><p>Upload the need data to hadoop file system</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hadoop fs -<span class="built_in">cp</span> marktwain.txt hdfs://namenode:8020/project/wordcount/marktwain.txt</span></span><br></pre></td></tr></table></figure><p>Run the wordCount Application downloaded  from official website</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hadoop jar hadoop-mapreduce-examples-2.8.3.jar wordcount hdfs://namenode:8020/project/wordcount hdfs://namenode:8020/project/wordcount/result</span></span><br></pre></td></tr></table></figure><p>Pull the result from hadoop file system</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hadoop fs -get /project/wordcount/result</span></span><br></pre></td></tr></table></figure><p>You can check the result by any text-editor in your local file system now !</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> result/part-r-00000</span></span><br></pre></td></tr></table></figure><h3 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h3><p>Hadoop: 2.8.1&#x2F;2.8.3<br>Java: 1.8</p>]]></content>
      
      
      
        <tags>
            
            <tag> hadoop </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Java构建神经网络</title>
      <link href="/2016/12/19/%E5%88%A9%E7%94%A8Java%E6%9E%84%E5%BB%BA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
      <url>/2016/12/19/%E5%88%A9%E7%94%A8Java%E6%9E%84%E5%BB%BA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>神经网络模型也被称为人工神经网络(Artificial Neural Network,ANN),它是一类非线性模型，用来在给定输入变量集合的情况下，对输出进行预测。其最早的例子可以追溯到20世纪40年代早期，当时用它来解决分类问题。可以说，它是一类非线性的回归方法。最近几年在深度学习中应用很广泛，本篇文章抱着学习其原理的心态，参考书籍，力图用Java语言实现一个神经网络。</p><p>由于网上有太多介绍神经网络的文章，这里对它的原理这种关键点描述，不在展开他们的细节，直接探究其实现方法，如果不了解这些知识点请自行Google。</p><ul><li>多层前向传播网络</li><li>激活函数</li><li>反向传播算法(Backpropagation Algorithm)</li></ul><span id="more"></span><h2 id="建立ANN"><a href="#建立ANN" class="headerlink" title="建立ANN"></a>建立ANN</h2><h3 id="构造激活函数"><a href="#构造激活函数" class="headerlink" title="构造激活函数"></a>构造激活函数</h3><p>这里主要使用Simgod和tanh函数，主要是因为他们的范围可控，并且导数易求(神经网络中的导数往往要简单到可以由f(x)求得，主要是因为f(x)的值常常被记录下来，利用将极大提高效率)。也可以自己实现一个激活函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chengsluo.ann;</span><br><span class="line"><span class="comment">//将加权和映射到某个固定范围，如[-1,1];</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Activation</span> &#123;</span><br><span class="line"><span class="comment">//激活函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">f</span><span class="params">(<span class="type">double</span> x)</span>;</span><br><span class="line"><span class="comment">//激活函数的导数，这是在反向传播过程中必须要用到的。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">df</span><span class="params">(<span class="type">double</span> x)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后面的一部分是Sigmod函数的具体实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//sigmod(k,x)函数的实现1/(1+e^(-k*x))，其中k控制函数值从正变为负的变化速率</span></span><br><span class="line"><span class="comment">//可以推到其导数为k*f(x)*(1-f(x))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Activation <span class="title function_">logit</span><span class="params">(<span class="keyword">final</span> <span class="type">double</span> k)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Activation</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">f</span><span class="params">(<span class="type">double</span> x)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1.0</span>/(<span class="number">1.0</span> + Math.exp(-k*x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">df</span><span class="params">(<span class="type">double</span> x)</span> &#123;</span><br><span class="line">x = f(x);</span><br><span class="line"><span class="keyword">return</span> k*x*(<span class="number">1.0</span>-x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Activation <span class="title function_">sigmoid</span><span class="params">(<span class="type">double</span> k)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> logit(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//默认k=1.0</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Activation <span class="title function_">logit</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> logit(<span class="number">1.0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Activation <span class="title function_">sigmoid</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> logit();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//双曲正切函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Activation <span class="title function_">tanh</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Activation</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">f</span><span class="params">(<span class="type">double</span> x)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Math.tanh(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//(tanh(x))&#x27;=1-tanh(x)^2;</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">df</span><span class="params">(<span class="type">double</span> x)</span> &#123;</span><br><span class="line">x = f(x);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1.0</span> - x*x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构建单层"><a href="#构建单层" class="headerlink" title="构建单层"></a>构建单层</h3><p>这里在构建网络层的时候，为了简化起见，给每一个层配置了相同的激活函数，这常常是默认的做法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chengsluo.ann;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Layer</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">printVec</span><span class="params">(<span class="type">double</span>[] x)</span> &#123;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">sb.append(<span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;x.length;i++) &#123; <span class="keyword">if</span>(i &gt; <span class="number">0</span>) sb.append(<span class="string">&quot;,&quot;</span>);sb.append(x[i]); &#125;</span><br><span class="line">sb.append(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span>[]   v;</span><br><span class="line"><span class="type">double</span>[][] w;</span><br><span class="line"><span class="type">double</span>[]   bW = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">Activation fn;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> units 本层节点个数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inputs 与每个节点连接的输入节点的个数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fn 本层所用的激活函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bias 是否使用bias</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Layer</span><span class="params">(<span class="type">int</span> units,<span class="type">int</span> inputs,Activation fn,<span class="type">boolean</span> bias)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.fn = fn;</span><br><span class="line">v   = <span class="keyword">new</span> <span class="title class_">double</span>[units];</span><br><span class="line">w = <span class="keyword">new</span> <span class="title class_">double</span>[units][];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;v.length;i++) w[i] = <span class="keyword">new</span> <span class="title class_">double</span>[inputs];</span><br><span class="line"><span class="keyword">if</span>(bias)</span><br><span class="line">bW = <span class="keyword">new</span> <span class="title class_">double</span>[units];</span><br><span class="line">err = <span class="keyword">new</span> <span class="title class_">double</span>[units];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回本层网络节点数</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">units</span><span class="params">()</span> &#123; <span class="keyword">return</span> v.length; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span>[] value()  &#123; <span class="keyword">return</span> v; &#125;</span><br><span class="line"><span class="type">double</span>[]   err;</span><br><span class="line"><span class="comment">//记录反向传播时，本层节点的所有误差的平方和</span></span><br><span class="line"><span class="type">double</span>     E;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span>[] errors() &#123; <span class="keyword">return</span> err; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span>[] feed(<span class="type">double</span>[] x) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;v.length;i++) &#123;</span><br><span class="line"><span class="type">double</span>[] W = w[i];</span><br><span class="line">v[i] = bW != <span class="literal">null</span> ? bW[i] : <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;W.length;j++)</span><br><span class="line">v[i] += W[j]*x[j];</span><br><span class="line"><span class="comment">//将当前节点值更新为权重乘以对应输入的总和.</span></span><br><span class="line"><span class="comment">//并用激活函数归一化</span></span><br><span class="line">v[i] = fn.f(v[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里的v[i]是上一层节点共同作用的结果。影响率为w[j].</span></span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span>[] backprop(<span class="type">double</span>[] s) &#123;</span><br><span class="line"><span class="type">double</span>[] out = <span class="keyword">new</span> <span class="title class_">double</span>[w[<span class="number">0</span>].length];</span><br><span class="line">E = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;v.length;i++) &#123;</span><br><span class="line">err[i] = fn.df(v[i])*s[i];</span><br><span class="line"><span class="comment">//期望值与真实值的偏差-&gt;s[i]与此点的导数的乘积</span></span><br><span class="line"><span class="comment">//同等偏差情况下，导数越大，误差err越大</span></span><br><span class="line">E += err[i]*err[i];</span><br><span class="line"><span class="type">double</span>[] W = w[i];</span><br><span class="line"><span class="comment">//根据前一层节点对本节点的贡献率来给前一层节点的对应位置制造反向传播的输入</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;W.length;j++) out[j] += W[j]*err[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里的out[i]是本层所有节点共同作用的结果</span></span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* backprop与feed不同的地方是：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * feed传入的是函数值，输出的也是函数值</span></span><br><span class="line"><span class="comment"> * backprop传入的是偏差值，但会经过df处理，</span></span><br><span class="line"><span class="comment"> * 按照复合函数的链式法则，处理后的结果仍然是内层函数的偏差值，</span></span><br><span class="line"><span class="comment"> * 所以可以继续传递到前一层。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">error</span><span class="params">()</span> &#123; <span class="keyword">return</span> E; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span>[] update(<span class="type">double</span>[] o,<span class="type">double</span> r) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;v.length;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(bW != <span class="literal">null</span>)</span><br><span class="line">bW[i] += r*err[i];</span><br><span class="line"></span><br><span class="line"><span class="type">double</span>[] W = w[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;W.length;j++)</span><br><span class="line">W[j] += r*err[i]*o[j];</span><br><span class="line"><span class="comment">//权重的增加值为:上一层的输出与连接位的对应误差err再乘以学习率的乘积的和。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//误差越大权重每轮增加越大，学习率越大，权重增加越快。</span></span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//随机构建初始值[-1,1]</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(Random rng)</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;v.length;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;w[i].length;j++)</span><br><span class="line">w[i][j] = <span class="number">2</span>*rng.nextDouble() - <span class="number">1</span>;</span><br><span class="line">bW[i] = <span class="number">2</span>*rng.nextDouble() - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">()</span> &#123;</span><br><span class="line">initialize(<span class="keyword">new</span> <span class="title class_">Random</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组织成网络"><a href="#组织成网络" class="headerlink" title="组织成网络"></a>组织成网络</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chengsluo.ann;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NeuralNetwork</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">inputUnits</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">ArrayList&lt;Layer&gt; layers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Layer&gt;();</span><br><span class="line"><span class="type">double</span> <span class="variable">learningRate</span> <span class="operator">=</span> <span class="number">0.2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> NeuralNetwork <span class="title function_">learningRate</span><span class="params">(<span class="type">double</span> l)</span> &#123;</span><br><span class="line">learningRate = l;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> NeuralNetwork <span class="title function_">inputs</span><span class="params">(<span class="type">int</span> inputUnits)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.inputUnits = inputUnits;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> NeuralNetwork <span class="title function_">momentumLayer</span><span class="params">(<span class="type">int</span> units, Activation fn, <span class="type">boolean</span> bias)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">inputs</span> <span class="operator">=</span> (layers.size() == <span class="number">0</span>) ? <span class="built_in">this</span>.inputUnits : layers.get(layers.size() - <span class="number">1</span>).units();</span><br><span class="line">layers.add(<span class="keyword">new</span> <span class="title class_">MomentumLayer</span>(units, inputs, fn, bias));</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认bias为空</span></span><br><span class="line"><span class="keyword">public</span> NeuralNetwork <span class="title function_">momentumLayer</span><span class="params">(<span class="type">int</span> units, Activation fn)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> momentumLayer(units, fn, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认激活函数为tanh();</span></span><br><span class="line"><span class="keyword">public</span> NeuralNetwork <span class="title function_">momentumLayer</span><span class="params">(<span class="type">int</span> units)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> momentumLayer(units, Activation.tanh());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> NeuralNetwork <span class="title function_">layer</span><span class="params">(<span class="type">int</span> units, Activation fn, <span class="type">boolean</span> bias)</span> &#123;</span><br><span class="line"><span class="comment">//获取上一层网络的节点数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">inputs</span> <span class="operator">=</span> (layers.size() == <span class="number">0</span>) ? <span class="built_in">this</span>.inputUnits : layers.get(layers.size() - <span class="number">1</span>).units();</span><br><span class="line">layers.add(<span class="keyword">new</span> <span class="title class_">Layer</span>(units, inputs, fn, bias));</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> NeuralNetwork <span class="title function_">layer</span><span class="params">(<span class="type">int</span> units, Activation fn)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> layer(units, fn, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> NeuralNetwork <span class="title function_">layer</span><span class="params">(<span class="type">int</span> units)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> layer(units, Activation.tanh());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从前到后，将前一层的输出反馈给本层作输入,返回最后一层的feed结果</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span>[] feed(<span class="type">double</span>[] x) &#123;</span><br><span class="line"><span class="keyword">for</span> (Layer l : layers)</span><br><span class="line">x = l.feed(x);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取最后一层的Value</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span>[] output() &#123;</span><br><span class="line"><span class="keyword">return</span> layers.get(layers.size() - <span class="number">1</span>).value();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将每一层的错误累加起来</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">error</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">double</span> <span class="variable">E</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (Layer l : layers)</span><br><span class="line">E += l.error();</span><br><span class="line"><span class="keyword">return</span> E;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> NeuralNetwork <span class="title function_">train</span><span class="params">(<span class="type">double</span>[] x, <span class="type">double</span>[] y)</span> &#123;</span><br><span class="line"><span class="comment">//首先前向传播值</span></span><br><span class="line"><span class="type">double</span>[] out = feed(x);</span><br><span class="line"><span class="comment">//计算最终误差</span></span><br><span class="line"><span class="type">double</span>[] s = <span class="keyword">new</span> <span class="title class_">double</span>[out.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; y.length; i++)</span><br><span class="line">s[i] = y[i] - out[i];</span><br><span class="line"><span class="comment">//打印每层的偏差向量</span></span><br><span class="line">System.out.println(Layer.printVec(y)+<span class="string">&quot; - &quot;</span>+Layer.printVec(out)+<span class="string">&quot; =&gt; &quot;</span>+Layer.printVec(s));</span><br><span class="line"><span class="comment">//反向传播错误率，同时更新了节点错误率</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> layers.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">s = layers.get(i).backprop(s);</span><br><span class="line"><span class="comment">//按照错误率和前一层值更新本层本层对应节点权重</span></span><br><span class="line"><span class="keyword">for</span> (Layer l : layers)</span><br><span class="line">x = l.update(x, learningRate);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> NeuralNetwork <span class="title function_">initialize</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (Layer l : layers)</span><br><span class="line">l.initialize();</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取一个新的神经网络对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> NeuralNetwork <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NeuralNetwork</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="提升性能-利用冲量构造单层"><a href="#提升性能-利用冲量构造单层" class="headerlink" title="提升性能(利用冲量构造单层)"></a>提升性能(利用冲量构造单层)</h3><p>这里层的实现不在使用前面讲的基本方法来更新权值，而是使用单独的矩阵来存储权重delta值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chengsluo.ann;</span><br><span class="line"><span class="comment">//使用冲量层来构建进行权值更新</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这会使得权重在同一方向的收敛速度加快</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MomentumLayer</span> <span class="keyword">extends</span> <span class="title class_">Layer</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> dW[][];</span><br><span class="line"><span class="type">double</span> dbW[];</span><br><span class="line"><span class="type">double</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">0.1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MomentumLayer</span><span class="params">(<span class="type">int</span> units, <span class="type">int</span> inputs, Activation fn, <span class="type">boolean</span> bias)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(units, inputs, fn, bias);</span><br><span class="line">dW = <span class="keyword">new</span> <span class="title class_">double</span>[units][];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; v.length; i++)</span><br><span class="line">dW[i] = <span class="keyword">new</span> <span class="title class_">double</span>[inputs];</span><br><span class="line"><span class="keyword">if</span> (bias)</span><br><span class="line">dbW = <span class="keyword">new</span> <span class="title class_">double</span>[units];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">//在权重的更新过程中，使用该权重的新delta值与旧delta值的加权平均</span></span><br><span class="line"><span class="comment">//其中的权值为参数m</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span>[] update(<span class="type">double</span>[] o, <span class="type">double</span> r) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; v.length; i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (bW != <span class="literal">null</span>) &#123;</span><br><span class="line">dbW[i] = (<span class="number">1</span> - m) * r * err[i] + m * dbW[i];</span><br><span class="line">bW[i] += dbW[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span>[] W = w[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; W.length; j++) &#123;</span><br><span class="line">dW[i][j] = (<span class="number">1</span> - m) * r * err[i] * o[j] + m * dW[i][j];</span><br><span class="line">W[j] += dW[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="测试ANN"><a href="#测试ANN" class="headerlink" title="测试ANN"></a>测试ANN</h2><h3 id="训练一个异或模型"><a href="#训练一个异或模型" class="headerlink" title="训练一个异或模型"></a>训练一个异或模型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chengsluo.ann;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XorTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Obs</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span>[] x;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span>[] y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Obs</span><span class="params">(<span class="type">double</span>[] x,<span class="type">double</span>[]y)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.x = x;</span><br><span class="line"><span class="built_in">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Obs <span class="title function_">obs</span><span class="params">(<span class="type">double</span>[] x,<span class="type">double</span>[] y)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Obs</span>(x,y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">Obs[] xorData = <span class="keyword">new</span> <span class="title class_">Obs</span>[]&#123;</span><br><span class="line">obs(<span class="keyword">new</span> <span class="title class_">double</span>[]&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,<span class="keyword">new</span> <span class="title class_">double</span>[]&#123;<span class="number">0</span>&#125;),</span><br><span class="line">obs(<span class="keyword">new</span> <span class="title class_">double</span>[]&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,<span class="keyword">new</span> <span class="title class_">double</span>[]&#123;<span class="number">1</span>&#125;),</span><br><span class="line">obs(<span class="keyword">new</span> <span class="title class_">double</span>[]&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,<span class="keyword">new</span> <span class="title class_">double</span>[]&#123;<span class="number">1</span>&#125;),</span><br><span class="line">obs(<span class="keyword">new</span> <span class="title class_">double</span>[]&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,<span class="keyword">new</span> <span class="title class_">double</span>[]&#123;<span class="number">0</span>&#125;),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">NeuralNetwork</span> <span class="variable">nn</span> <span class="operator">=</span> NeuralNetwork.build().inputs(<span class="number">2</span>).layer(<span class="number">3</span>).layer(<span class="number">1</span>);</span><br><span class="line">NeuralNetwork bad= NeuralNetwork.build().inputs(<span class="number">2</span>).layer(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;nn\tbad&quot;</span>);</span><br><span class="line">nn.initialize();</span><br><span class="line">bad.initialize();</span><br><span class="line"><span class="type">double</span> <span class="variable">lastErr</span> <span class="operator">=</span> Double.POSITIVE_INFINITY;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++) &#123;</span><br><span class="line"><span class="type">double</span> <span class="variable">err</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">errBad</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">for</span>(Obs x : xorData) &#123;</span><br><span class="line">nn.train(x.x,x.y);</span><br><span class="line">bad.train(x.x,x.y);</span><br><span class="line">err += nn.error();</span><br><span class="line">errBad += bad.error();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(err+<span class="string">&quot;\t&quot;</span>+errBad);</span><br><span class="line"><span class="keyword">if</span>(Math.abs(lastErr - err) &lt; <span class="number">1e-6</span>) <span class="keyword">break</span>;</span><br><span class="line">lastErr = err;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="时间序列测试"><a href="#时间序列测试" class="headerlink" title="时间序列测试"></a>时间序列测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chengsluo.ann;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeSeriesTest</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">14</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span>[] x = <span class="keyword">new</span> <span class="title class_">double</span>[k];</span><br><span class="line"><span class="type">double</span>[] y = <span class="keyword">new</span> <span class="title class_">double</span>[<span class="number">1</span>];</span><br><span class="line"><span class="type">double</span>   <span class="variable">t</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line"><span class="type">Random</span> <span class="variable">twist</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="type">NeuralNetwork</span>       <span class="variable">nn</span>    <span class="operator">=</span> NeuralNetwork.build().inputs(k).layer(<span class="number">5</span>).layer(<span class="number">1</span>).initialize();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++) &#123;</span><br><span class="line"><span class="type">double</span> <span class="variable">base</span> <span class="operator">=</span> Math.sin(t);</span><br><span class="line">y[<span class="number">0</span>] = base + <span class="number">0.5</span>*twist.nextGaussian();</span><br><span class="line"><span class="keyword">if</span>(i &gt;= x.length) &#123;</span><br><span class="line">nn.train(x, y);</span><br><span class="line">System.out.println(nn.output()[<span class="number">0</span>]+<span class="string">&quot;\t&quot;</span>+y[<span class="number">0</span>]+<span class="string">&quot;\t&quot;</span>+base);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;i&lt;x.length-<span class="number">1</span>;j++) x[i] = x[i+<span class="number">1</span>];</span><br><span class="line">x[x.length-<span class="number">1</span>]=y[<span class="number">0</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">x[i] = y[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">t += <span class="number">2.0</span>*Math.PI/<span class="number">60.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="冲量层加速测试"><a href="#冲量层加速测试" class="headerlink" title="冲量层加速测试"></a>冲量层加速测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chengsluo.ann;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MomentumComparisonTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Obs</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span>[] x;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span>[] y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Obs</span><span class="params">(<span class="type">double</span>[] x, <span class="type">double</span>[] y)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.x = x;</span><br><span class="line"><span class="built_in">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Obs <span class="title function_">obs</span><span class="params">(<span class="type">double</span>[] x, <span class="type">double</span>[] y)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Obs</span>(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">Obs[] xorData = <span class="keyword">new</span> <span class="title class_">Obs</span>[] &#123; obs(<span class="keyword">new</span> <span class="title class_">double</span>[] &#123; -<span class="number">1</span>, <span class="number">0</span> &#125;, <span class="keyword">new</span> <span class="title class_">double</span>[] &#123; <span class="number">0</span> &#125;),</span><br><span class="line">obs(<span class="keyword">new</span> <span class="title class_">double</span>[] &#123; <span class="number">1</span>, <span class="number">0</span> &#125;, <span class="keyword">new</span> <span class="title class_">double</span>[] &#123; <span class="number">1</span> &#125;), obs(<span class="keyword">new</span> <span class="title class_">double</span>[] &#123; <span class="number">0</span>, <span class="number">1</span> &#125;, <span class="keyword">new</span> <span class="title class_">double</span>[] &#123; <span class="number">1</span> &#125;),</span><br><span class="line">obs(<span class="keyword">new</span> <span class="title class_">double</span>[] &#123; <span class="number">1</span>, <span class="number">1</span> &#125;, <span class="keyword">new</span> <span class="title class_">double</span>[] &#123; <span class="number">0</span> &#125;), &#125;;</span><br><span class="line"></span><br><span class="line">NeuralNetwork[] nn = <span class="keyword">new</span> <span class="title class_">NeuralNetwork</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">nn[i] = NeuralNetwork.build().inputs(<span class="number">2</span>).layer(<span class="number">3</span>).layer(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">nn[i] = NeuralNetwork.build().inputs(<span class="number">2</span>).momentumLayer(<span class="number">3</span>).momentumLayer(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span> err[] = <span class="keyword">new</span> <span class="title class_">double</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">nn[i].initialize();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">300</span>; j++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="type">NeuralNetwork</span> <span class="variable">n</span> <span class="operator">=</span> nn[i];</span><br><span class="line">err[i] = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">for</span> (Obs x : xorData) &#123;</span><br><span class="line">n.train(x.x, x.y);</span><br><span class="line">err[i] += n.error();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span>)</span><br><span class="line">sb.append(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">sb.append(err[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sb.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>拜伦·埃利斯. 实时分析[M]. 机械工业出版社, 2016.</p><p>CS231n: Convolutional Neural Networks for Visual Recognition<br><a href="http://cs231n.stanford.edu/">http://cs231n.stanford.edu</a></p><p>SourceCode<br><a href="https://github.com/chengsluo/code-java/tree/master/ArtificialNeuralNetwork">https://github.com/chengsluo/code-java/tree/master/ArtificialNeuralNetwork</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>线性回归与逻辑回归</title>
      <link href="/2016/12/06/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E4%B8%8E%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
      <url>/2016/12/06/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E4%B8%8E%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h2><p>线性模型是许多领域中最流行的统计建模方法，最开始主要应用与经济学，遗传学等领域。又名回归模型，或最小二乘模型，这个名称来自于用来寻找这类模型系数的技术。线性模型需要假定观察值服从正态分布模型。</p><span id="more"></span><h2 id="最小二乘法"><a href="#最小二乘法" class="headerlink" title="最小二乘法"></a>最小二乘法</h2><p>最小二乘法是线性回归最基本的方法，但单变量的线性回归实现方法如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> wiley.streaming.ols;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleLinearModel</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> a, b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SimpleLinearModel</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.a = a;</span><br><span class="line"><span class="built_in">this</span>.b = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">y</span><span class="params">(<span class="type">double</span> x)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ａ + b * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">error</span><span class="params">(<span class="type">double</span>[] y, <span class="type">double</span>[] x)</span> &#123;</span><br><span class="line"><span class="type">double</span> <span class="variable">error</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; y.length; i++)</span><br><span class="line">error += (y[i] - a - b * x[i]) * (y[i] - a - b * x[i]);</span><br><span class="line"><span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fit</span><span class="params">(<span class="type">double</span>[] y, <span class="type">double</span>[] x)</span> &#123;</span><br><span class="line"><span class="type">double</span> <span class="variable">sumX</span> <span class="operator">=</span> <span class="number">0.0</span>, sumY = <span class="number">0.0</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">sumXY</span> <span class="operator">=</span> <span class="number">0.0</span>, sumX2 = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; y.length; i++) &#123;</span><br><span class="line">sumX += x[i];</span><br><span class="line">sumY += y[i];</span><br><span class="line">sumXY += x[i] * y[i];</span><br><span class="line">sumX2 += x[i] * x[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">n</span> <span class="operator">=</span> (<span class="type">double</span>) y.length;</span><br><span class="line">b = (sumXY - (sumX * sumY) / n) / (sumX2 - (sumX * sumX) / n);</span><br><span class="line">a = sumY / n - (b * sumX) / n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="QR分解"><a href="#QR分解" class="headerlink" title="QR分解"></a>QR分解</h2><p>如果是多变量，如果满足特定条件,解决方案见括号:</p><ol><li><p>不同的Ｘ变量之间没有关联，术语叫相互独立。(可以去掉相互关联的的变量只剩其中一个,或者对其进行正交变换，如主成分分析，这样就可以生成不相关的ｘ值了)</p></li><li><p>ｙ的标准差不依赖与ｘ的值(只有ｙ的均值随ｘ的值变化)</p></li></ol><p>如果这些条件都得到了满足，并且已经将ｘ的值放入ｋ列ｎ行的矩阵Ｘ，其中k是不同变量的数量，ｎ是观察次数。那就可以通过下列表达式找到使平方误差的均值最小的向量B：<br>$$B&#x3D;(X^TX)^{-1}X^Ty$$<br>该公式是线性方程组的解，这种方程组又名为正规方程。可以使用Apache Commons Math库等线性代数库来直接求值。但是，直接求解可能存在数值稳定性方面的问题，因此可以使用其他数据，最常见为QR分解算法。它是指任何矩阵A都可以用两个矩阵Q和R来表示，其中Q是正交矩阵（变量不相关），R是上对角矩阵。正交矩阵有$Q^TQ&#x3D;I$的特性，其中I是单位矩阵。将X替换为QR分解，计算B的等式就变成：<br>$$B&#x3D;(R^{-1}Q^T)y$$<br>下面是直接使用Commons Math库的普通线性回归和多元线性回归方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> wiley.streaming.ols;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.math3.linear.Array2DRowRealMatrix;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.math3.linear.ArrayRealVector;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.math3.linear.QRDecomposition;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.math3.linear.RealMatrix;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.math3.linear.RealVector;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinearModel</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span>[] B;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinearModel</span><span class="params">(<span class="type">double</span>[] B)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.B = B;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">y</span><span class="params">(<span class="type">double</span>[] x)</span> &#123;</span><br><span class="line"><span class="type">double</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;B.length;i++) y += B[i]*x[i];</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">error</span><span class="params">(<span class="type">double</span>[] y,<span class="type">double</span>[][] x)</span> &#123;</span><br><span class="line"><span class="type">double</span> <span class="variable">error</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;y.length;i++) &#123;</span><br><span class="line"><span class="type">double</span> <span class="variable">diff</span> <span class="operator">=</span> y[i] - y(x[i]);</span><br><span class="line">error += diff*diff;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fit</span><span class="params">(<span class="type">double</span>[] y,<span class="type">double</span>[][] x)</span> &#123;</span><br><span class="line"><span class="type">RealMatrix</span> <span class="variable">X</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Array2DRowRealMatrix</span>(x);</span><br><span class="line"><span class="type">RealVector</span> <span class="variable">Y</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayRealVector</span>(y);</span><br><span class="line">B = (<span class="keyword">new</span> <span class="title class_">QRDecomposition</span>(X)).getSolver().solve(Y).toArray();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fitOLS</span><span class="params">(<span class="type">double</span>[] y,<span class="type">double</span>[][] x)</span> &#123;</span><br><span class="line"><span class="type">OLSMultipleLinearRegression</span> <span class="variable">ols</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OLSMultipleLinearRegression</span>();</span><br><span class="line">ols.newSampleData(y, x);</span><br><span class="line">B = ols.estimateRegressionParameters();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h2><p>对于观察值不服从正态分布的模型，也可以使用广义线性模型来拟合(Generalized Linear Model， GLM) 来拟合。这类模型中，都假设观察值ｙ服从指数分布簇中的分布。如泊松分布就用来对计数数据进行建模。其中一个最流行的GLM模型是逻辑回归模型，他用来为伯努利分布的数据建模。具体来说，它被用来对事件发生的概率或观察值属于某个类的概率建模。逻辑回归模型也有针对多个类建模的扩展，在该扩展模型中，模型的输出是多项分布，不是伯努利分布。</p><p>与其他的线性模型相似，逻辑回归的迭代结果y’是通过对输入ｘ的值进行加权线性组合得来的。但是，逻辑回归并不是直接使用这个概率，而是将它转换成0和１之间的值。如果给定输入和输出的观察值，要求B时，逻辑回归要比线性回归复杂，这时候常常使用牛顿迭代法的方法通过不断缩短误差来训练回归模型，神经网络中的低度下降法原理也是类似的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> wiley.streaming.ols;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogisticRegression</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span>[] B;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LogisticRegression</span><span class="params">(<span class="type">double</span>[] B)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.B = B;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">y</span><span class="params">(<span class="type">double</span>[] x)</span> &#123;</span><br><span class="line"><span class="type">double</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; B.length; i++)</span><br><span class="line">y += B[i] * x[i];</span><br><span class="line"><span class="keyword">return</span> logit(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">invlogit</span><span class="params">(<span class="type">double</span> p)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Math.log(p / (<span class="number">1</span> - p));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">logit</span><span class="params">(<span class="type">double</span> y)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1.0</span> / (<span class="number">1.0</span> + Math.exp(-y));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> LogisticRegression <span class="title function_">initialize</span><span class="params">(<span class="type">int</span> k, <span class="type">double</span> alpha)</span> &#123;</span><br><span class="line">B = <span class="keyword">new</span> <span class="title class_">double</span>[k];</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">MAX_ITER</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">alpha</span> <span class="operator">=</span> <span class="number">0.2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> LogisticRegression <span class="title function_">fit</span><span class="params">(<span class="type">double</span>[][] x, <span class="type">double</span>[] y)</span> &#123;</span><br><span class="line"><span class="comment">//Initialize the weights</span></span><br><span class="line">B = <span class="keyword">new</span> <span class="title class_">double</span>[x[<span class="number">0</span>].length];</span><br><span class="line"><span class="type">double</span> <span class="variable">lastError</span> <span class="operator">=</span> Double.POSITIVE_INFINITY;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">iter</span> <span class="operator">=</span> <span class="number">0</span>; iter &lt; MAX_ITER; iter++) &#123;</span><br><span class="line"><span class="type">double</span> <span class="variable">err2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; x.length; i++) &#123;</span><br><span class="line"><span class="type">double</span> <span class="variable">t</span> <span class="operator">=</span> y[i] - y(x[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; x[i].length; i++)</span><br><span class="line">B[j] += alpha * t * x[i][j];</span><br><span class="line">err2 += t * t;</span><br><span class="line">&#125;</span><br><span class="line">err2 = Math.sqrt(err2);</span><br><span class="line"><span class="keyword">if</span> (err2 - lastError &lt; <span class="number">1e-6</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">lastError = err2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>拜伦·埃利斯. 实时分析[M]. 机械工业出版社, 2016.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 回归 </tag>
            
            <tag> 模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>走自己的路，玩自己的扫雷</title>
      <link href="/2016/11/06/%E8%B5%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E8%B7%AF%EF%BC%8C%E7%8E%A9%E8%87%AA%E5%B7%B1%E7%9A%84%E6%89%AB%E9%9B%B7/"/>
      <url>/2016/11/06/%E8%B5%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E8%B7%AF%EF%BC%8C%E7%8E%A9%E8%87%AA%E5%B7%B1%E7%9A%84%E6%89%AB%E9%9B%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Windows10更新后，附件里的以前喜闻乐见的小游戏，比如蜘蛛纸牌，三维弹球，扫雷都消失了。这些游戏我记得从windows XP都开始存在了，b（￣▽￣）d　好怀念！正好这次Windows开发课程有个左右，我和另外一个小组成员准备一起做个游戏，做什么好呢，来吧，做个扫雷玩吧。嘣(๑•̀ㅂ•́)و✧！ </p><span id="more"></span><h2 id="界面设计"><a href="#界面设计" class="headerlink" title="界面设计"></a>界面设计</h2><p>由于使用的是Win32中的工具库，除了界面菜单部分，其他的界面都需要自己重绘，并且控制生命周期.所以程序结构就比较复杂,最后的成品如下:<br><img src="/images/run-mine-sweeper.png" alt="扫雷界面"></p><h2 id="数字显示设计"><a href="#数字显示设计" class="headerlink" title="数字显示设计"></a>数字显示设计</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//画数字</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">draw_num</span><span class="params">(HDC hdc, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">static</span> HPEN hWhitePen = <span class="built_in">CreatePen</span>(PS_SOLID, <span class="number">3</span>, <span class="built_in">RGB</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line"><span class="built_in">SelectObject</span>(hdc, hWhitePen);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MoveToEx</span>(hdc, x + sp[i][<span class="number">0</span>], y + sp[i][<span class="number">1</span>], <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">LineTo</span>(hdc, x + ep[i][<span class="number">0</span>], y + ep[i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> HPEN hRedPen = <span class="built_in">CreatePen</span>(PS_SOLID, <span class="number">3</span>, <span class="built_in">RGB</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"><span class="built_in">SelectObject</span>(hdc, hRedPen);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (light[num][i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">MoveToEx</span>(hdc, x + sp[i][<span class="number">0</span>], y + sp[i][<span class="number">1</span>], <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">LineTo</span>(hdc, x + ep[i][<span class="number">0</span>], y + ep[i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="地图生成算法设计"><a href="#地图生成算法设计" class="headerlink" title="地图生成算法设计"></a>地图生成算法设计</h2><p>随机生成点，并且将周围的对地雷周围的格子权值加1.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在整个雷盘布置num个雷，而且保证(px,py)点不能被放上雷</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setmine</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span> px, <span class="type">int</span> py)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span> tx, ty;</span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">&#123;</span><br><span class="line">tx = <span class="built_in">rand</span>() %COLUMNS;<span class="comment">//随机数挑选纵坐标</span></span><br><span class="line">ty = <span class="built_in">rand</span>() % ROWS;<span class="comment">//随机数挑选横坐标</span></span><br><span class="line"><span class="keyword">if</span> (ma[tx][ty] == <span class="number">10</span> || (tx == px &amp;&amp; ty == py))<span class="comment">//如果这一点已经被布置过雷，或者是(px,py)点，那么就跳过，重新挑点</span></span><br><span class="line">&#123;</span><br><span class="line">i--;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">ma[tx][ty] = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//将四周不是雷的点的数字加一</span></span><br><span class="line"><span class="keyword">if</span> (ty&gt;<span class="number">0</span>&amp;&amp;ma[tx][ty - <span class="number">1</span>] &lt; <span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line">ma[tx][ty - <span class="number">1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ty + <span class="number">1</span>&lt;ROWS &amp;&amp; ma[tx][ty + <span class="number">1</span>] &lt; <span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line">ma[tx][ty + <span class="number">1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tx + <span class="number">1</span>&lt;COLUMNS &amp;&amp; ma[tx + <span class="number">1</span>][ty] &lt; <span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line">ma[tx + <span class="number">1</span>][ty]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tx&gt;<span class="number">0</span>&amp;&amp;ma[tx - <span class="number">1</span>][ty] &lt; <span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line">ma[tx - <span class="number">1</span>][ty]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tx <span class="number">+1</span> &lt;COLUMNS &amp;&amp; ty+ <span class="number">1</span> &lt;ROWS &amp;&amp; ma[tx + <span class="number">1</span>][ty + <span class="number">1</span>] &lt; <span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line">ma[tx + <span class="number">1</span>][ty + <span class="number">1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tx &gt;<span class="number">0</span>&amp;&amp; ty&gt;<span class="number">0</span>&amp;&amp;ma[tx - <span class="number">1</span>][ty - <span class="number">1</span>] &lt; <span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line">ma[tx - <span class="number">1</span>][ty - <span class="number">1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tx<span class="number">+1</span>&lt;COLUMNS &amp;&amp; ty&gt;<span class="number">0</span> &amp;&amp; ma[tx + <span class="number">1</span>][ty - <span class="number">1</span>] &lt; <span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line">ma[tx + <span class="number">1</span>][ty - <span class="number">1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tx&gt;<span class="number">0</span> &amp;&amp; ty<span class="number">+1</span>&lt;ROWS &amp;&amp; ma[tx - <span class="number">1</span>][ty + <span class="number">1</span>] &lt; <span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line">ma[tx - <span class="number">1</span>][ty + <span class="number">1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p>我的Github<br><a href="https://github.com/chengsluo/Mine-Sweeper">https://github.com/chengsluo/Mine-Sweeper</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建Hexo博客和配置主题的一些坑</title>
      <link href="/2016/09/06/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E5%92%8C%E9%85%8D%E7%BD%AE%E4%B8%BB%E9%A2%98%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
      <url>/2016/09/06/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E5%92%8C%E9%85%8D%E7%BD%AE%E4%B8%BB%E9%A2%98%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>今天更新了Hexo版本，并更换了博客主题，在配置这些环境的过程中遇到了一些坑，在此分享一波!</p><h2 id="无法更新或生成Hexo"><a href="#无法更新或生成Hexo" class="headerlink" title="无法更新或生成Hexo"></a>无法更新或生成Hexo</h2><ul><li>问题:node版本升级得过高，导致与现有运行库不兼容</li><li>解决方案:用npm安装n,用n来回顾node版本号</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> npm i -g npm</span><br><span class="line"></span><br><span class="line">n *.*.*    (切回到*.*.*稳定版本)</span><br><span class="line"></span><br><span class="line">node -v</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="添加Next主题"><a href="#添加Next主题" class="headerlink" title="添加Next主题"></a>添加Next主题</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> themes/next</span><br><span class="line"></span><br><span class="line">curl -s https://api.github.com/repos/iissnan/hexo-theme-next/releases/latest | grep tarball_url | <span class="built_in">cut</span> -d <span class="string">&#x27;&quot;&#x27;</span> -f 4 | wget -i - -O- | tar -zx -C themes/next --strip-components=1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="按照文档分别Hexo和Next中的-config-yml"><a href="#按照文档分别Hexo和Next中的-config-yml" class="headerlink" title="按照文档分别Hexo和Next中的_config.yml"></a>按照文档分别Hexo和Next中的_config.yml</h2><p>注意:后面有一个空格。下面是我的一些配置项</p><ul><li>Hexo<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sidebar: </span><br><span class="line"> offset: 16</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: ssh://git@github.com/chengsluo/chengsluo.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li><li>Next<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scheme: Gemini</span><br><span class="line"></span><br><span class="line">mathjax:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 编写文档</span></span><br><span class="line">hexo new &lt;title&gt;</span><br><span class="line"><span class="comment">## 重新生成</span></span><br><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line"><span class="comment">## 调试预览</span></span><br><span class="line">hexo server</span><br><span class="line"><span class="comment">## 调试完成后再发布</span></span><br><span class="line">hexo deploy</span><br><span class="line"><span class="comment">## 一键发布</span></span><br><span class="line">hexo clean &amp;&amp; hexo generate --deploy</span><br><span class="line"></span><br><span class="line"><span class="comment">## 添加远程git部署支持</span></span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"><span class="comment">## 启用本地搜索</span></span><br><span class="line">npm install hexo-generator-search --save</span><br><span class="line"><span class="comment">## 摘要与正文分割</span></span><br><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>hexo官方文档<br><a href="https://hexo.io/zh-tw/index.html">https://hexo.io/zh-tw/index.html</a></p><p>Hexo博客使用MathJax公式并解决Markdown渲染冲突问题<br><a href="https://zhuanlan.zhihu.com/p/33857596">https://zhuanlan.zhihu.com/p/33857596</a></p><p>NexT主题<br><a href="https://github.com/iissnan/hexo-theme-next">https://github.com/iissnan/hexo-theme-next</a></p><p>Node version management<br><a href="https://github.com/tj/n">https://github.com/tj/n</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git分支管理与多人协作</title>
      <link href="/2016/03/06/Git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E4%B8%8E%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C/"/>
      <url>/2016/03/06/Git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E4%B8%8E%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>“有了远程仓库，妈妈再也不用担心我的硬盘了。”——Git点读机</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>工作区有一个隐藏目录.git，这个不算工作区，而是Git的暂存区和版本库。</p><p>前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：<br>第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；<br>第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p><p>git commit只负责把暂存区的修改提交.因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。</p><span id="more"></span><h2 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。</span></span><br><span class="line"><span class="comment"># 配置用户名，邮箱，彩色UI</span></span><br><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span><br><span class="line">git config --global color.ui <span class="literal">true</span></span><br><span class="line"><span class="comment"># 还有要给远程仓库添加本地的SSH-public-key</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置命令别名，简化操作</span></span><br><span class="line">git config --global alias.st status</span><br><span class="line">git config --global alias.co checkout</span><br><span class="line">git config --global alias.ci commit</span><br><span class="line">git config --global alias.br branch</span><br><span class="line">git config --global alias.unstage <span class="string">&#x27;reset HEAD&#x27;</span></span><br><span class="line">git config --global alias.last <span class="string">&#x27;log -1&#x27;</span></span><br><span class="line">git config --global alias.lg <span class="string">&quot;log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 本仓库配置文件，不加--global</span></span><br><span class="line"><span class="comment"># 每个仓库的Git配置文件都放在.git/config文件中：</span></span><br><span class="line">$ <span class="built_in">cat</span> .git/config </span><br><span class="line">[core]</span><br><span class="line">    repositoryformatversion = 0</span><br><span class="line">    filemode = <span class="literal">true</span></span><br><span class="line">    bare = <span class="literal">false</span></span><br><span class="line">    logallrefupdates = <span class="literal">true</span></span><br><span class="line">    ignorecase = <span class="literal">true</span></span><br><span class="line">    precomposeunicode = <span class="literal">true</span></span><br><span class="line">[remote <span class="string">&quot;origin&quot;</span>]</span><br><span class="line">    url = git@github.com:michaelliao/learngit.git</span><br><span class="line">    fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch <span class="string">&quot;master&quot;</span>]</span><br><span class="line">    remote = origin</span><br><span class="line">    merge = refs/heads/master</span><br><span class="line">[<span class="built_in">alias</span>]</span><br><span class="line">    last = <span class="built_in">log</span> -1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局配置</span></span><br><span class="line"><span class="comment"># 用户主目录下的一个隐藏文件.gitconfig中</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> .gitconfig</span><br><span class="line">[<span class="built_in">alias</span>]</span><br><span class="line">    co = checkout</span><br><span class="line">    ci = commit</span><br><span class="line">    br = branch</span><br><span class="line">    st = status</span><br><span class="line">[user]</span><br><span class="line">    name = Your Name</span><br><span class="line">    email = your@email.com</span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看状态</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment">#对比文件更新处</span></span><br><span class="line">git diff readme.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看历史记录</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回退到Head指针的前一个版本</span></span><br><span class="line">git reset --hard HEAD^</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回退到之前的某个版本</span></span><br><span class="line">git reset --hard (commit-hash-id)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果忘记了commit-hash-id怎么办,获取历史hash值</span></span><br><span class="line">git reflog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将某个修改过的文件还原成上次git add时的状态</span></span><br><span class="line"><span class="comment"># (丢弃工作区内容为暂存区,若无，则为版本库内容)</span></span><br><span class="line">git checkout -- fileName</span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git checkout </span><br><span class="line"><span class="comment"># 丢弃暂存区此文件内容</span></span><br><span class="line">git reset HEAD fileName</span><br></pre></td></tr></table></figure><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并切换分支</span></span><br><span class="line">git checkout -b dev</span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git branch -d dev</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line"><span class="comment"># 如果指定分支是在当前分支最新版本上衍生出来的，则可以快速合并，否则可能需要解决冲突。</span></span><br><span class="line">git merge dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 冲突处理</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容。</span></span><br><span class="line"><span class="comment"># 直接打开文件将当前分支冲突的部分修改成指定分支的内容或删除，再提交一个新的版本，再合并。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用快速合并,因为在这种模式下，删除分支后，会丢掉分支信息。</span></span><br><span class="line">git merge --no-ff -m <span class="string">&quot;merge with no-ff&quot;</span> dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图形化分支历史</span></span><br><span class="line">git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存当前分支现场,包括工作区和暂存区(如果本分支还有没有做完的工作，但是需要切换分支)</span></span><br><span class="line">git stash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复工作现场</span></span><br><span class="line">git stash list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复不删除</span></span><br><span class="line">git stash apply [stash@&#123;0&#125;]</span><br><span class="line"><span class="comment"># 删除stash</span></span><br><span class="line">git stash drop [stash@&#123;0&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">#  恢复的同时删除</span></span><br><span class="line">git stash pop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看远程分支</span></span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建本地与对应的远程分支</span></span><br><span class="line">git checkout -b dev origin/dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将本地当前分支推送到远程库(不要直接用git push，这样会推送所有分支)</span></span><br><span class="line">git push origin/dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定本地dev分支与远程origin/dev分支的链接</span></span><br><span class="line">git branch --set-upstream dev origin/dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送到远程分支失败(解决方案)</span></span><br><span class="line"><span class="comment">## 拉取远程分支到本地,使用前需要将当前分支与远程分支建立连接，不然不知道pull到哪里</span></span><br><span class="line">git pull </span><br><span class="line"><span class="comment">## 如果有冲突，要解决冲突后commit -m &quot; conflict &amp; fix&quot;，再push。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加版本别名</span></span><br><span class="line">git tag v1.0  [-m <span class="string">&quot;version 0.1 released&quot;</span> 3628164]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本信息</span></span><br><span class="line">git show v0.9</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地版本号</span></span><br><span class="line">git tag -d v0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送版本到远程库</span></span><br><span class="line">git push origin v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程标签，先要删本地</span></span><br><span class="line">git push origin :refs/tags/v0.9</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="管理策略"><a href="#管理策略" class="headerlink" title="管理策略"></a>管理策略</h2><p>master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；<br>干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上;</p><p>如果是多人协同开发，则每个人开发时都需要创建自己的分支，开发者完成一个任务时，只合并到dev分支上，–no-ff参数可以看出合并历史；</p><p>一些命名规范：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Bug分支</span></span><br><span class="line">git checkout -b issue-101</span><br><span class="line"></span><br><span class="line"><span class="comment"># Feature分支</span></span><br><span class="line">git checkout -b feature-vulcan</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制删除某个未合并的分支，慎用</span></span><br><span class="line">git branch -D feature-vulcan</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一些远程同步的规范：</p><ul><li>master分支是主分支，因此要时刻与远程同步；</li><li>dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</li><li>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</li><li>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</li></ul><p>多人协作的工作模式：</p><ol><li>首先，可以试图用git push origin branch-name推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！</li></ol><p>复制当前Git仓库创建一个完全独立的Git仓库，完成了之后，可以发起pull request来为官方Git库贡献代码</p><h2 id="添加忽略"><a href="#添加忽略" class="headerlink" title="添加忽略"></a>添加忽略</h2><p>根目录下添加<code>.gitignore</code>文件，可以参考或历史项目的此文件，在项目开始时就要添加：</p><ul><li><a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a></li><li><a href="https://www.gitignore.io/api/jetbrains">https://www.gitignore.io/api/jetbrains</a><br>忽略文件的原则是：</li></ul><ol><li>忽略操作系统自动生成的文件，比如缩略图等；</li><li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要进版本库，比如Java编译产生的.class文件；</li><li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li></ol><p>相关命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 与之对应的忽略文件行</span></span><br><span class="line">git check-ignore -v App.class</span><br><span class="line"><span class="comment"># 强制添加</span></span><br><span class="line"> git add -f App.class</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>廖雪峰的Git教程</p><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
